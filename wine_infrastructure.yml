  - name: __setup_infrastructure
    buildsystem: simple
    build-commands:
      - mkdir -p /app/bin
      - install -Dm555 setup_infrastructure.sh /app/bin
    sources:
      - type: script
        dest-filename: setup_infrastructure.sh
        commands:
          - if [ -z "$4" ] || [ "$1" -eq "-h" ] || [ "$1" -eq "--help" ] ; then
          -      echo "this script tries to be helpful during wine setup inside flatpak. \n
          -      \n
          -      The first parameter is a file which existence prevents game installer from activation (e.g. game files) \n
          -      The second parameter is the installation script \n
          -      The third parameter is a bash expression to extensions install scripts (e.g. /app/extensions/\*/bin/install.sh), they have to validate by themselves if they have to do something or not because they run on every startup \n
          -      The fourth parameter does basically what the third does, though it allows different extensions to coexist by executing the first script returned by bash (e.g. /app/extensions/*/bin/start.sh) after they were set up. It is for custom launchers \n
          -      \n
          -      it's a script that runs extensions installers, stops if return value is different than 0 making it possible to stop the execution if necessary, allows for custom launchers and starts the main install script for your game. Basically can be used to not reimplement all the time the same code when experimenting with winepack and/or flatpak \n
          -      example can be like that setup_infrastructure.sh \"${WINEPREFIX}/Game.exe\" \"/app/bin/installer\" \"/app/extensions/*/bin/installer\" \"/app/extensions/*/bin/starter\" "
          -
          - #install
          - if ! [ -e $1 ] ; then
          -     echo "installing $2"
          -     source /app/bin/installer
          -     if [[ $? != 0 ]]; then
          -         echo "Installation failed, abort."
          -         exit 1
          -     fi
          -     exit 0
          - fi
          -
          - # install extensions
          - # for every installer in extensions/*/bin test if any exists and run it
          - for f in $3 ; do
          -      test -f "$f" && source "$f"
          -      # close if the scripts request it
          -      if [[ $? != 0 ]]; then
          -           echo "error code $? forced the script to stop."
          -           exit $?
          -      fi
          - done
          -
          - # start extensions
          - for f in $4 ; do
          -      test -f "$f" && source "$f"
          - done
